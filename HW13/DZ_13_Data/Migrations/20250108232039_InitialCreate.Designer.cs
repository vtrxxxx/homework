// <auto-generated />
using System;
using DZ_13_Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DZ_13_Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250108232039_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DZ_13_Data.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Хакер-компьютерщик узнает от загадочных повстанцев о настоящей сущности своей реальности и о своей роли в войне с ее контроллерами.",
                            Director = "Вачовски",
                            Genre = "Фантастика",
                            Title = "Матрица"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Вор, который крадет корпоративные тайны с помощью технологии обмена снами, получает задание внедрить идею в сознание генерального директора.",
                            Director = "Кристофер Нолан",
                            Genre = "Фантастика",
                            Title = "Начало"
                        });
                });

            modelBuilder.Entity("DZ_13_Data.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Sessions", null, t =>
                        {
                            t.HasCheckConstraint("CK_Session_EndTime_After_StartTime", "[EndTime] > [StartTime]");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            MovieId = 1,
                            RoomName = "Room1",
                            StartDate = new DateTime(2025, 1, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            StartTime = new TimeSpan(0, 14, 30, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            MovieId = 1,
                            RoomName = "Room2",
                            StartDate = new DateTime(2025, 1, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            StartTime = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            MovieId = 2,
                            RoomName = "Room3",
                            StartDate = new DateTime(2025, 1, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            StartTime = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            EndTime = new TimeSpan(0, 21, 0, 0, 0),
                            MovieId = 2,
                            RoomName = "Room4",
                            StartDate = new DateTime(2025, 1, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            StartTime = new TimeSpan(0, 19, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("DZ_13_Data.Entities.Session", b =>
                {
                    b.HasOne("DZ_13_Data.Entities.Movie", "Movie")
                        .WithMany("Sessions")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("DZ_13_Data.Entities.Movie", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
